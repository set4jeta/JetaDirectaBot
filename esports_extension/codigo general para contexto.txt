from dataclasses import dataclass
from datetime import datetime
from typing import List, Dict, Optional
import pytz
import nextcord
from nextcord.ext import commands
import aiohttp

# ---------------------------
#  Data Models
# ---------------------------
@dataclass
class Team:
    id: str
    name: str
    code: str
    image: str
    result: Dict[str, int]
    record: Dict[str, int]

@dataclass
class Game:
    id: str
    number: int
    state: str  # 'completed', 'inProgress', 'unneeded'
    teams: List[Dict]
    vods: List[Dict]
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None

@dataclass
class Match:
    id: str
    league: str
    slug: str
    start_time: datetime
    state: str  # 'unstarted', 'inProgress', 'completed'
    strategy_type: str
    best_of: int
    teams: List[Team]
    games: List[Game]
    block_name: str

@dataclass
class LiveGameData:
    game_id: str
    match_id: str
    blue_team: Team
    red_team: Team
    participants: List[Dict]
    frames: List[Dict]
    game_state: str
    metadata: Dict

# ---------------------------
#  API Client
# ---------------------------
class LolEsportsAPI:
    def __init__(self, api_key: str):
        self.base_url = "https://esports-api.lolesports.com/persisted/gw"
        self.livestats_url = "https://feed.lolesports.com/livestats/v1/window"
        self.headers = {"x-api-key": api_key}
    
    async def get_schedule(self) -> List[Match]:
        """Obtiene el calendario de partidos"""
        url = f"{self.base_url}/getSchedule?hl=en-US"
        async with aiohttp.ClientSession() as session:
            response = await session.get(url, headers=self.headers)
            data = await response.json()
            return self._parse_schedule(data["data"]["schedule"]["events"])
    
    def _parse_schedule(self, raw_events: List[Dict]) -> List[Match]:
        """Convierte la respuesta de la API en objetos Match"""
        matches = []
        for event in raw_events:
            if event["type"] != "match":
                continue
            
            match_data = event["match"]
            matches.append(Match(
                id=match_data["id"],
                league=event["league"]["name"],
                slug=event["league"]["slug"],
                start_time=datetime.fromisoformat(event["startTime"].replace('Z', '+00:00')),
                state=event["state"],
                strategy_type=match_data["strategy"]["type"],
                best_of=match_data["strategy"]["count"],
                teams=[self._parse_team(t) for t in match_data["teams"]],
                games=[],
                block_name=event["blockName"]
            ))
        return matches
    
    def _parse_team(self, raw_team: Dict) -> Team:
        """Convierte datos de equipo de la API"""
        return Team(
            id=raw_team.get("id", ""),
            name=raw_team["name"],
            code=raw_team["code"],
            image=raw_team["image"],
            result=raw_team["result"],
            record=raw_team["record"]
        )

    async def get_event_details(self, event_id: str) -> Match:
        """Obtiene detalles de un evento específico"""
        url = f"{self.base_url}/getEventDetails?hl=en-US&id={event_id}"
        async with aiohttp.ClientSession() as session:
            response = await session.get(url, headers=self.headers)
            data = await response.json()
            return self._parse_event_details(data["data"]["event"])
    
    def _parse_event_details(self, raw_event: Dict) -> Match:
        """Convierte los detalles del evento en objeto Match"""
        match_data = raw_event["match"]
        return Match(
            id=raw_event["id"],
            league=raw_event["league"]["name"],
            slug=raw_event["league"]["slug"],
            start_time=datetime.fromisoformat(raw_event.get("startTime", "1970-01-01T00:00:00Z").replace('Z', '+00:00')),
            state=raw_event["state"],
            strategy_type=match_data["strategy"]["type"],
            best_of=match_data["strategy"]["count"],
            teams=[self._parse_team(t) for t in match_data["teams"]],
            games=[self._parse_game(g) for g in match_data["games"]],
            block_name=raw_event.get("blockName", "")
        )
    
    def _parse_game(self, raw_game: Dict) -> Game:
        """Convierte datos de un juego individual"""
        return Game(
            id=raw_game["id"],
            number=raw_game["number"],
            state=raw_game["state"],
            teams=raw_game["teams"],
            vods=raw_game["vods"]
        )

    async def get_live_stats(self, game_id: str) -> LiveGameData:
        """Obtiene estadísticas en tiempo real de un juego"""
        url = f"{self.livestats_url}/{game_id}"
        async with aiohttp.ClientSession() as session:
            response = await session.get(url)
            data = await response.json()
            return self._parse_live_stats(data)
    
    def _parse_live_stats(self, raw_data: Dict) -> LiveGameData:
        """Convierte estadísticas en vivo en objeto estructurado"""
        metadata = raw_data["gameMetadata"]
        return LiveGameData(
            game_id=raw_data["esportsGameId"],
            match_id=raw_data["esportsMatchId"],
            blue_team=self._parse_live_team(metadata["blueTeamMetadata"]),
            red_team=self._parse_live_team(metadata["redTeamMetadata"]),
            participants=metadata["blueTeamMetadata"]["participantMetadata"] + 
                        metadata["redTeamMetadata"]["participantMetadata"],
            frames=raw_data["frames"],
            game_state=raw_data["frames"][-1]["gameState"] if raw_data["frames"] else "unknown",
            metadata=metadata
        )

# ---------------------------
#  Core Tracker
# ---------------------------
class MatchTracker:
    def __init__(self, api: LolEsportsAPI):
        self.api = api
        self.tracked_matches: Dict[str, Match] = {}
        self.live_games: Dict[str, LiveGameData] = {}
    
    async def update_matches(self):
        """Actualiza todos los partidos trackeados"""
        schedule = await self.api.get_schedule()
        
        # Actualizar partidos existentes
        for match in schedule:
            if match.id in self.tracked_matches:
                self._update_match_data(match)
            else:
                self.tracked_matches[match.id] = match
                
        # Verificar estado de juegos en vivo
        await self._check_live_games()
    
    def _update_match_data(self, new_data: Match):
        """Actualiza los datos de un partido existente"""
        existing = self.tracked_matches[new_data.id]
        existing.state = new_data.state
        existing.games = new_data.games
        existing.teams = new_data.teams
    
    async def _check_live_games(self):
        """Verifica y actualiza el estado de los juegos en vivo"""
        for game in list(self.live_games.values()):
            updated_data = await self.api.get_live_stats(game.game_id)
            
            # Actualizar frames y estado del juego
            game.frames = updated_data.frames
            game.game_state = updated_data.game_state
            
            # Si el juego terminó, dejar de trackear
            if game.game_state == "finished":
                del self.live_games[game.game_id]

# ---------------------------
#  Discord Bot
# ---------------------------
class EsportsBot(commands.Bot):
    def __init__(self, api_key: str, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.api = LolEsportsAPI(api_key)
        self.tracker = MatchTracker(self.api)
        
    async def setup_hook(self):
        self.loop.create_task(self.tracker.update_matches())

    def create_match_embed(self, match: Match) -> nextcord.Embed:
        """Crea un embed de Discord para un partido"""
        embed = nextcord.Embed(
            title=f"{match.league} - {match.block_name}",
            description=f"Best of {match.best_of}",
            color=0x00ff00 if match.state == "inProgress" else 0xff0000,
            timestamp=match.start_time
        )
        
        teams_info = "\n".join(
            f"{team.code}: {team.record['wins']}W - {team.record['losses']}L"
            for team in match.teams
        )
        
        embed.add_field(
            name="Equipos",
            value=teams_info,
            inline=False
        )
        
        if match.games:
            games_info = "\n".join(
                f"Game {g.number}: {g.state}"
                for g in match.games
            )
            embed.add_field(name="Juegos", value=games_info)
            
        return embed

# ---------------------------
#  Configuración e Inicialización
# ---------------------------
if __name__ == "__main__":
    bot = EsportsBot(
        api_key="TU_API_KEY",
        command_prefix="!",
        intents=nextcord.Intents.default()
    )
    
    @bot.command()
    async def partidos(ctx):
        """Muestra los partidos en curso"""
        embeds = []
        for match in bot.tracker.tracked_matches.values():
            if match.state == "inProgress":
                embeds.append(bot.create_match_embed(match))
        
        await ctx.send(embeds=embeds[:10])  # Limitar a 10 embeds
    
    bot.run("TOKEN_DISCORD")